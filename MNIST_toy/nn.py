# -*- coding: utf-8 -*-
"""analysis_of_actvations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1znUgvd5DhCmRjb2t3WxxnQHiYWKFhnSg
"""

import numpy as np
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

import torch #imports
import torch.nn as nn
import torchvision.transforms as transforms
import torchvision.datasets as dsets

train_dataset = dsets.MNIST(root='./data', 
                            train=True, 
                            transform=transforms.ToTensor(),
                            download=True)

test_dataset = dsets.MNIST(root='./data', 
                           train=False, 
                           transform=transforms.ToTensor())

batch_size = 128
n_iters = 2500
num_epochs = 2
num_epochs = int(num_epochs)

train_loader = torch.utils.data.DataLoader(dataset=train_dataset, 
                                           batch_size=batch_size, 
                                           shuffle=True)

test_loader = torch.utils.data.DataLoader(dataset=test_dataset, 
                                          batch_size=batch_size, 
                                          shuffle=False)

if torch.cuda.is_available():  
  dev = "cuda:0" 
  print("on gpu")
else:  
  dev = "cpu"
class LoggerLayer(nn.Module):
      def __init__(self, other_layer : nn.Module, log : list):
        super(LoggerLayer, self).__init__()
        self.log = log 
        self.layer = other_layer
        self.logging = False#no logging during training

      def forward(self, x):
        y =   self.layer(x)

        if self.logging:  
          self.log.append(y)
        return y
class FeedforwardNeuralNetModel(nn.Module):
    def __init__(self, input_dim, hidden_dim, output_dim):
        super(FeedforwardNeuralNetModel, self).__init__()


       
        # Linear function
        self.fc1 = nn.Linear(input_dim, 256) 
        self.fc2 = nn.Linear(256, 32) 
        # Non-linearity
        self.relu = nn.ReLU()
        # Linear function (readout)
        self.fc3 = nn.Linear(32, output_dim)  

        #loggers
        self.log_relu = nn.ReLU()
        self.logger1 = LoggerLayer(self.log_relu,[])
        self.logger2 = LoggerLayer(self.log_relu, [])
        self.logger3 = LoggerLayer(self.fc3, [])

        

      

    def forward(self, x):
        
        out = self.fc1(x)

        
        out = self.logger1(out)
        
        out = self.fc2(out)
        out = self.logger2(out)

        
        out = self.logger3(out)
       
        return out

input_dim = 28*28
hidden_dim = 128
output_dim = 10

model = FeedforwardNeuralNetModel(input_dim, hidden_dim, output_dim)
print(model.logger1.log)

criterion = nn.CrossEntropyLoss()
learning_rate = 0.1

optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)

iter = 0
print(model)
for epoch in range(num_epochs):
    for i, (images, labels) in enumerate(train_loader):
        
        # Load images with gradient accumulation capabilities
        images = images.view(-1, 28*28).requires_grad_()

        # Clear gradients w.r.t. parameters
        optimizer.zero_grad()

        # Forward pass to get output/logits
        outputs = model(images)

        # Calculate Loss: softmax --> cross entropy loss
        loss = criterion(outputs, labels)

        # Getting gradients w.r.t. parameters
        loss.backward()

        # Updating parameters
        optimizer.step()

        iter += 1

        if iter % 100 == 0:
            # Calculate Accuracy         
            correct = 0
            total = 0
            # Iterate through test dataset
            
            for images, labels in test_loader:
                # Load images with gradient accumulation capabilities
                images = images.view(-1, 28*28).requires_grad_()

                # Forward pass only to get logits/output
                outputs = model(images)

                # Get predictions from the maximum value
                _, predicted = torch.max(outputs.data, 1)
                #print(predicted)
                
                # Total number of labels
                total += labels.size(0)

                # Total correct predictions
                correct += (predicted == labels).sum()

            accuracy = 100 * correct / total

            # Print Loss
            print('Iteration: {}. Loss: {}. Accuracy: {}'.format(iter, loss.item(), accuracy))
            #print(model.logger1.log[0].shape)

torch.onnx.export(model, torch.ones(784),  "simplenn.onnx")